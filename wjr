import pygame
import random
import math

# 初始化 Pygame
pygame.init()
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("动态爱心粒子动画")

# 颜色
BLACK = (0, 0, 0)
RED = (255, 100, 150)
BLUE = (100, 150, 255)

# 粒子类
class Particle:
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color
        self.size = random.uniform(3, 6)  # 增大初始粒子大小
        self.speed_x = random.uniform(-1.5, 1.5)  # 增大横向随机漂浮
        self.speed_y = random.uniform(-2.5, -1.5)  # 增大纵向漂浮速度
        self.alpha = 255  # 初始透明度

    def move(self):
        # 粒子上浮和扩散效果
        self.x += self.speed_x
        self.y += self.speed_y
        self.alpha -= 4  # 更快地减少透明度
        self.size *= 0.97  # 缩小粒子大小以模拟消失效果

    def draw(self, surface):
        if self.alpha > 0:
            s = pygame.Surface((self.size * 2, self.size * 2), pygame.SRCALPHA)
            pygame.draw.circle(s, (*self.color, self.alpha), (int(self.size), int(self.size)), int(self.size))
            surface.blit(s, (self.x - self.size, self.y - self.size))

# 生成心形路径上的粒子
def heart_shape(t):
    x = 16 * math.sin(t) ** 3
    y = 13 * math.cos(t) - 5 * math.cos(2 * t) - 2 * math.cos(3 * t) - math.cos(4 * t)
    return int(width / 2 + x * 15), int(height / 2 - y * 15)

particles = []

# 主循环
running = True
clock = pygame.time.Clock()
while running:
    screen.fill(BLACK)

    # 加快粒子的生成速度
    for _ in range(8):  # 每次生成8个粒子
        t = random.uniform(0, 2 * math.pi)
        x, y = heart_shape(t)
        color = RED if random.random() > 0.5 else BLUE
        particles.append(Particle(x, y, color))

    # 更新和绘制粒子
    for particle in particles[:]:
        particle.move()
        particle.draw(screen)
        if particle.alpha <= 0:  # 移除透明度为0的粒子
            particles.remove(particle)

    # 事件处理
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    pygame.display.flip()
    clock.tick(30)

pygame.quit()
